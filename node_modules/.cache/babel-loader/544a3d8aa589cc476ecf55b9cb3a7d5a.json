{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rewriteLiveReferences;\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _template = _interopRequireDefault(require(\"@babel/template\"));\n\nvar _helperSimpleAccess = _interopRequireDefault(require(\"@babel/helper-simple-access\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction rewriteLiveReferences(programPath, metadata) {\n  const imported = new Map();\n  const exported = new Map();\n\n  const requeueInParent = path => {\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  programPath.traverse(rewriteBindingInitVisitor, {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported\n  });\n  (0, _helperSimpleAccess.default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));\n  programPath.traverse(rewriteReferencesVisitor, {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported,\n    exported,\n    buildImportReference: ([source, importName, localName], identNode) => {\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) identNode = t.callExpression(identNode, []);\n        return identNode;\n      }\n\n      let namespace = t.identifier(meta.name);\n      if (meta.lazy) namespace = t.callExpression(namespace, []);\n      const computed = metadata.stringSpecifiers.has(importName);\n      return t.memberExpression(namespace, computed ? t.stringLiteral(importName) : t.identifier(importName), computed);\n    }\n  });\n}\n\nconst rewriteBindingInitVisitor = {\n  Scope(path) {\n    path.skip();\n  },\n\n  ClassDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    const {\n      id\n    } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n    const exportNames = exported.get(localName) || [];\n\n    if (exportNames.length > 0) {\n      const statement = t.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t.identifier(localName)));\n      statement._blockHoist = path.node._blockHoist;\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n\n  VariableDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = t.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t.identifier(localName)));\n        statement._blockHoist = path.node._blockHoist;\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  }\n\n};\n\nconst buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {\n  return (exportNames || []).reduce((expr, exportName) => {\n    const {\n      stringSpecifiers\n    } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return t.assignmentExpression(\"=\", t.memberExpression(t.identifier(metadata.exportName), computed ? t.stringLiteral(exportName) : t.identifier(exportName), computed), expr);\n  }, localExpr);\n};\n\nconst buildImportThrow = localName => {\n  return _template.default.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor = {\n  ReferencedIdentifier(path) {\n    const {\n      seen,\n      buildImportReference,\n      scope,\n      imported,\n      requeueInParent\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const localName = path.node.name;\n    const localBinding = path.scope.getBinding(localName);\n    const rootBinding = scope.getBinding(localName);\n    if (rootBinding !== localBinding) return;\n    const importData = imported.get(localName);\n\n    if (importData) {\n      const ref = buildImportReference(importData, path.node);\n      ref.loc = path.node.loc;\n\n      if ((path.parentPath.isCallExpression({\n        callee: path.node\n      }) || path.parentPath.isOptionalCallExpression({\n        callee: path.node\n      }) || path.parentPath.isTaggedTemplateExpression({\n        tag: path.node\n      })) && t.isMemberExpression(ref)) {\n        path.replaceWith(t.sequenceExpression([t.numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && t.isMemberExpression(ref)) {\n        const {\n          object,\n          property\n        } = ref;\n        path.replaceWith(t.JSXMemberExpression(t.JSXIdentifier(object.name), t.JSXIdentifier(property.name)));\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n      path.skip();\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference\n      } = this;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      const left = path.get(\"left\");\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        const localName = left.node.name;\n\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n\n        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {\n          (0, _assert.default)(path.node.operator === \"=\", \"Path was not simplified\");\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, assignment.left);\n            assignment.right = t.sequenceExpression([assignment.right, buildImportThrow(localName)]);\n          }\n\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = t.sequenceExpression([path.node.right, buildImportThrow(id)]);\n        }\n\n        const items = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n\n          if (exportedNames.length > 0) {\n            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, t.identifier(localName)));\n          }\n        });\n\n        if (items.length > 0) {\n          let node = t.sequenceExpression(items);\n\n          if (path.parentPath.isExpressionStatement()) {\n            node = t.expressionStatement(node);\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    }\n\n  },\n\n  \"ForOfStatement|ForInStatement\"(path) {\n    const {\n      scope,\n      node\n    } = path;\n    const {\n      left\n    } = node;\n    const {\n      exported,\n      scope: programScope\n    } = this;\n\n    if (!t.isVariableDeclaration(left)) {\n      let didTransform = false;\n      const bodyPath = path.get(\"body\");\n      const loopBodyScope = bodyPath.scope;\n\n      for (const name of Object.keys(t.getOuterBindingIdentifiers(left))) {\n        if (exported.get(name) && programScope.getBinding(name) === scope.getBinding(name)) {\n          didTransform = true;\n\n          if (loopBodyScope.hasOwnBinding(name)) {\n            loopBodyScope.rename(name);\n          }\n        }\n      }\n\n      if (!didTransform) {\n        return;\n      }\n\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      bodyPath.unshiftContainer(\"body\", t.expressionStatement(t.assignmentExpression(\"=\", left, newLoopId)));\n      path.get(\"left\").replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(t.cloneNode(newLoopId))]));\n      scope.registerDeclaration(path.get(\"left\"));\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/sp479/Desktop/react js/movie_suggetion/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"],"names":["Object","defineProperty","exports","value","default","rewriteLiveReferences","_assert","_interopRequireDefault","require","t","_interopRequireWildcard","_template","_helperSimpleAccess","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","programPath","metadata","imported","Map","exported","requeueInParent","path","requeue","source","data","localName","importName","imports","importsNamespace","local","exportMeta","push","names","traverse","rewriteBindingInitVisitor","scope","Set","Array","from","keys","rewriteReferencesVisitor","seen","WeakSet","buildImportReference","identNode","meta","lazy","callExpression","namespace","identifier","name","computed","stringSpecifiers","memberExpression","stringLiteral","Scope","skip","ClassDeclaration","id","node","Error","exportNames","length","statement","expressionStatement","buildBindingExportAssignmentExpression","_blockHoist","insertAfter","VariableDeclaration","getOuterBindingIdentifiers","forEach","localExpr","reduce","expr","exportName","assignmentExpression","buildImportThrow","expression","ast","ReferencedIdentifier","add","localBinding","getBinding","rootBinding","importData","ref","loc","parentPath","isCallExpression","callee","isOptionalCallExpression","isTaggedTemplateExpression","tag","isMemberExpression","replaceWith","sequenceExpression","numericLiteral","isJSXIdentifier","object","property","JSXMemberExpression","JSXIdentifier","AssignmentExpression","exit","left","isIdentifier","exportedNames","operator","assignment","right","ids","programScopeIds","filter","find","items","isExpressionStatement","programScope","isVariableDeclaration","didTransform","bodyPath","loopBodyScope","hasOwnBinding","rename","newLoopId","generateUidIdentifierBasedOnNode","unshiftContainer","variableDeclaration","variableDeclarator","cloneNode","registerDeclaration"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rewriteLiveReferences;\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _template = _interopRequireDefault(require(\"@babel/template\"));\n\nvar _helperSimpleAccess = _interopRequireDefault(require(\"@babel/helper-simple-access\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction rewriteLiveReferences(programPath, metadata) {\n  const imported = new Map();\n  const exported = new Map();\n\n  const requeueInParent = path => {\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  programPath.traverse(rewriteBindingInitVisitor, {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported\n  });\n  (0, _helperSimpleAccess.default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));\n  programPath.traverse(rewriteReferencesVisitor, {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported,\n    exported,\n    buildImportReference: ([source, importName, localName], identNode) => {\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) identNode = t.callExpression(identNode, []);\n        return identNode;\n      }\n\n      let namespace = t.identifier(meta.name);\n      if (meta.lazy) namespace = t.callExpression(namespace, []);\n      const computed = metadata.stringSpecifiers.has(importName);\n      return t.memberExpression(namespace, computed ? t.stringLiteral(importName) : t.identifier(importName), computed);\n    }\n  });\n}\n\nconst rewriteBindingInitVisitor = {\n  Scope(path) {\n    path.skip();\n  },\n\n  ClassDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    const {\n      id\n    } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n    const exportNames = exported.get(localName) || [];\n\n    if (exportNames.length > 0) {\n      const statement = t.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t.identifier(localName)));\n      statement._blockHoist = path.node._blockHoist;\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n\n  VariableDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = t.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, t.identifier(localName)));\n        statement._blockHoist = path.node._blockHoist;\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  }\n\n};\n\nconst buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {\n  return (exportNames || []).reduce((expr, exportName) => {\n    const {\n      stringSpecifiers\n    } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return t.assignmentExpression(\"=\", t.memberExpression(t.identifier(metadata.exportName), computed ? t.stringLiteral(exportName) : t.identifier(exportName), computed), expr);\n  }, localExpr);\n};\n\nconst buildImportThrow = localName => {\n  return _template.default.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor = {\n  ReferencedIdentifier(path) {\n    const {\n      seen,\n      buildImportReference,\n      scope,\n      imported,\n      requeueInParent\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const localName = path.node.name;\n    const localBinding = path.scope.getBinding(localName);\n    const rootBinding = scope.getBinding(localName);\n    if (rootBinding !== localBinding) return;\n    const importData = imported.get(localName);\n\n    if (importData) {\n      const ref = buildImportReference(importData, path.node);\n      ref.loc = path.node.loc;\n\n      if ((path.parentPath.isCallExpression({\n        callee: path.node\n      }) || path.parentPath.isOptionalCallExpression({\n        callee: path.node\n      }) || path.parentPath.isTaggedTemplateExpression({\n        tag: path.node\n      })) && t.isMemberExpression(ref)) {\n        path.replaceWith(t.sequenceExpression([t.numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && t.isMemberExpression(ref)) {\n        const {\n          object,\n          property\n        } = ref;\n        path.replaceWith(t.JSXMemberExpression(t.JSXIdentifier(object.name), t.JSXIdentifier(property.name)));\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n      path.skip();\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference\n      } = this;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      const left = path.get(\"left\");\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        const localName = left.node.name;\n\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n\n        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {\n          (0, _assert.default)(path.node.operator === \"=\", \"Path was not simplified\");\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, assignment.left);\n            assignment.right = t.sequenceExpression([assignment.right, buildImportThrow(localName)]);\n          }\n\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = t.sequenceExpression([path.node.right, buildImportThrow(id)]);\n        }\n\n        const items = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n\n          if (exportedNames.length > 0) {\n            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, t.identifier(localName)));\n          }\n        });\n\n        if (items.length > 0) {\n          let node = t.sequenceExpression(items);\n\n          if (path.parentPath.isExpressionStatement()) {\n            node = t.expressionStatement(node);\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    }\n\n  },\n\n  \"ForOfStatement|ForInStatement\"(path) {\n    const {\n      scope,\n      node\n    } = path;\n    const {\n      left\n    } = node;\n    const {\n      exported,\n      scope: programScope\n    } = this;\n\n    if (!t.isVariableDeclaration(left)) {\n      let didTransform = false;\n      const bodyPath = path.get(\"body\");\n      const loopBodyScope = bodyPath.scope;\n\n      for (const name of Object.keys(t.getOuterBindingIdentifiers(left))) {\n        if (exported.get(name) && programScope.getBinding(name) === scope.getBinding(name)) {\n          didTransform = true;\n\n          if (loopBodyScope.hasOwnBinding(name)) {\n            loopBodyScope.rename(name);\n          }\n        }\n      }\n\n      if (!didTransform) {\n        return;\n      }\n\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      bodyPath.unshiftContainer(\"body\", t.expressionStatement(t.assignmentExpression(\"=\", left, newLoopId)));\n      path.get(\"left\").replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(t.cloneNode(newLoopId))]));\n      scope.registerDeclaration(path.get(\"left\"));\n    }\n  }\n\n};"]},"metadata":{},"sourceType":"script"}