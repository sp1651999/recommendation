{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sp479\\\\Desktop\\\\react js\\\\movie_suggetion\\\\src\\\\Music.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport song from './song.mp3';\n\nfunction Music() {\n  _s();\n\n  const [cond, setcond] = useState(0);\n  const [time, settime] = useState(0);\n  var audio = new Audio(song);\n  var myvar;\n\n  audio.oncanplaythrough = function () {\n    setcond(1);\n  };\n\n  useEffect(() => {\n    console.log(audio.currentTime);\n  }, [time]);\n\n  audio.onended = function () {\n    alert('ended');\n  };\n\n  function myTimer() {\n    settime(time + 1);\n    console.log(audio.currentTime);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (cond === 1) {\n          audio.play();\n        }\n\n        myvar = setInterval(myTimer, 1000);\n      },\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        audio.pause();\n        clearInterval(myvar);\n      },\n      children: \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Music, \"U4JnnE0pMaN4rYXs4+hEiEobhYU=\");\n\n_c = Music;\nexport default Music;\n\nvar _c;\n\n$RefreshReg$(_c, \"Music\");","map":{"version":3,"sources":["C:/Users/sp479/Desktop/react js/movie_suggetion/src/Music.jsx"],"names":["React","useEffect","useState","song","Music","cond","setcond","time","settime","audio","Audio","myvar","oncanplaythrough","console","log","currentTime","onended","alert","myTimer","play","setInterval","pause","clearInterval"],"mappings":";;;;;;AAAA;;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AACA,SAASC,KAAT,GAAiB;AAAA;;AAEb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAAD,CAAhC;AACA,MAAIO,KAAK,GAAG,IAAIC,KAAJ,CAAUP,IAAV,CAAZ;AACA,MAAIQ,KAAJ;;AAEAF,EAAAA,KAAK,CAACG,gBAAN,GAAyB,YAAY;AACjCN,IAAAA,OAAO,CAAC,CAAD,CAAP;AAEH,GAHD;;AAIAL,EAAAA,SAAS,CAAC,MAAI;AACVY,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,WAAlB;AACH,GAFQ,EAEP,CAACR,IAAD,CAFO,CAAT;;AAGAE,EAAAA,KAAK,CAACO,OAAN,GAAgB,YAAY;AACxBC,IAAAA,KAAK,CAAC,OAAD,CAAL;AACH,GAFD;;AAGA,WAASC,OAAT,GAAkB;AACdV,IAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,WAAlB;AACH;;AAED,sBACI;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAE,MAAM;AAAE,YAAIV,IAAI,KAAK,CAAb,EAAgB;AAAEI,UAAAA,KAAK,CAACU,IAAN;AAAc;;AAACR,QAAAA,KAAK,GAACS,WAAW,CAACF,OAAD,EAAS,IAAT,CAAjB;AAAiC,OAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAM;AAAET,QAAAA,KAAK,CAACY,KAAN;AAAeC,QAAAA,aAAa,CAACX,KAAD,CAAb;AAAsB,OAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGJ;AAAA,gBAAIJ;AAAJ;AAAA;AAAA;AAAA;AAAA,YAHI;AAAA,kBADJ;AAOH;;GA7BQH,K;;KAAAA,K;AA8BT,eAAeA,KAAf","sourcesContent":["/* eslint-disable no-unused-vars */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react';\r\nimport song from './song.mp3';\r\nfunction Music() {\r\n    \r\n    const [cond, setcond] = useState(0);\r\n    const [time, settime] = useState(0);\r\n    var audio = new Audio(song);\r\n    var myvar;\r\n    \r\n    audio.oncanplaythrough = function () {\r\n        setcond(1);\r\n        \r\n    }\r\n    useEffect(()=>{\r\n        console.log(audio.currentTime);\r\n    },[time])\r\n    audio.onended = function () {\r\n        alert('ended');\r\n    }\r\n    function myTimer(){\r\n        settime(time+1);\r\n        console.log(audio.currentTime);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button onClick={() => { if (cond === 1) { audio.play() } myvar=setInterval(myTimer,1000) }}>Play</button>\r\n            <button onClick={() => { audio.pause(); clearInterval(myvar) }}>Pause</button>\r\n    <p>{time}</p>\r\n        </>\r\n    )\r\n}\r\nexport default Music;\r\n"]},"metadata":{},"sourceType":"module"}