{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.options = void 0;\n    this.inModule = void 0;\n    this.scope = void 0;\n    this.classScope = void 0;\n    this.prodParam = void 0;\n    this.plugins = void 0;\n    this.filename = void 0;\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n    this.state = void 0;\n    this.input = void 0;\n    this.length = void 0;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { %0 as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.method) {\n      return;\n    }\n\n    super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node);\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    if (!exprList) {\n      return;\n    }\n\n    super.toReferencedListDeep(exprList, isParenthesizedExpr);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n};\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.override = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\n\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => {\n  var _temp;\n\n  return _temp = class extends superClass {\n    constructor(options, input) {\n      super(options, input);\n      this.flowPragma = void 0;\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes() {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums() {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type, val) {\n      if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment) {\n      if (this.flowPragma === undefined) {\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) ;else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || types.colon);\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate() {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(types.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n\n      if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n\n      if (this.eat(types.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(types.colon);\n      let type = null;\n      let predicate = null;\n\n      if (this.match(types.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n\n        if (this.match(types.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node) {\n      this.next();\n      this.flowParseInterfaceish(node, true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(node) {\n      this.next();\n      const id = node.id = this.parseIdentifier();\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(types.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(types.parenR);\n      [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n      this.resetEndLocation(id);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(node, insideModule) {\n      if (this.match(types._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(types._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(types._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(types.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(types._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(node) {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(true);\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node) {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(types.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = node.body = this.startNode();\n      const body = bodyNode.body = [];\n      this.expect(types.braceL);\n\n      while (!this.match(types.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(types._import)) {\n          this.next();\n\n          if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n            this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n          }\n\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n      this.expect(types.braceR);\n      this.finishNode(bodyNode, \"BlockStatement\");\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n          }\n\n          if (kind === \"ES\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(node, insideModule) {\n      this.expect(types._export);\n\n      if (this.eat(types._default)) {\n        if (this.match(types._function) || this.match(types._class)) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n\n        node.default = true;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n        }\n\n        if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(node) {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(node) {\n      this.next();\n      this.flowParseTypeAlias(node);\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(node) {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(node) {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    flowParseInterfaceish(node, isClass = false) {\n      node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n      this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false\n      });\n    }\n\n    flowParseInterfaceExtends() {\n      const node = this.startNode();\n      node.id = this.flowParseQualifiedTypeIdentifier();\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node) {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word, startLoc, declaration) {\n      if (!reservedTypes.has(word)) return;\n      this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n    }\n\n    flowParseRestrictedIdentifier(liberal, declaration) {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    flowParseTypeAlias(node) {\n      node.id = this.flowParseRestrictedIdentifier(false, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(types.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(node, declare) {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(true, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.supertype = null;\n\n      if (this.match(types.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(types.colon);\n      }\n\n      node.impltype = null;\n\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(types.eq);\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    flowParseTypeParameter(requireDefault = false) {\n      const nodeStart = this.state.start;\n      const node = this.startNode();\n      const variance = this.flowParseVariance();\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(types.eq)) {\n        this.eat(types.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration() {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n      this.state.inType = true;\n\n      if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      } while (!this.isRelational(\">\"));\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType() {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n      node.extends = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false\n      });\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey() {\n      return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(node, isStatic, variance) {\n      node.static = isStatic;\n\n      if (this.lookahead().type === types.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n\n      this.expect(types.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(node, isStatic) {\n      node.static = isStatic;\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(types.bracketR);\n      this.expect(types.bracketR);\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n      } else {\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n      }\n\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(node) {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(types.parenL);\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n\n      this.expect(types.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(node, isStatic) {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    }) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const nodeStart = this.startNode();\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n      let endDelim;\n      let exact;\n      let inexact = false;\n\n      if (allowExact && this.match(types.braceBarL)) {\n        this.expect(types.braceBarL);\n        endDelim = types.braceBarR;\n        exact = true;\n      } else {\n        this.expect(types.braceL);\n        endDelim = types.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart = null;\n        let inexactStart = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(types.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (this.eat(types.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n          } else {\n            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n          }\n        } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n\n            if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n        }\n      }\n\n      this.expect(endDelim);\n\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n      this.state.inType = oldInType;\n      return out;\n    }\n\n    flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n      if (this.eat(types.ellipsis)) {\n        const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n        let optional = false;\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    flowCheckGetterSetterParams(property) {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon() {\n      if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(types.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(startPos, startLoc, id) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType() {\n      const node = this.startNode();\n      this.expect(types._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType() {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(types.bracketL);\n\n      while (this.state.pos < this.length && !this.match(types.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(types.bracketR)) break;\n        this.expect(types.comma);\n      }\n\n      this.expect(types.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam() {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n\n      if (lh.type === types.colon || lh.type === types.question) {\n        name = this.parseIdentifier();\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(type) {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params = []) {\n      let rest = null;\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n\n      return {\n        params,\n        rest\n      };\n    }\n\n    flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    flowParsePrimaryType() {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case types.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n        case types.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true\n          });\n\n        case types.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false\n          });\n\n        case types.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case types.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(types.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n\n          break;\n\n        case types.parenL:\n          this.next();\n\n          if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            if (this.match(types.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== types.question && token !== types.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n              this.expect(types.parenR);\n              return type;\n            } else {\n              this.eat(types.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n        case types._true:\n        case types._false:\n          node.value = this.match(types._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case types.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n\n            if (this.match(types.num)) {\n              return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            if (this.match(types.bigint)) {\n              return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n          }\n\n          throw this.unexpected();\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n        case types._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case types._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case types._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case types.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType() {\n      const startPos = this.state.start,\n            startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n\n      while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(types.bracketL);\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n\n      return type;\n    }\n\n    flowParsePrefixType() {\n      const node = this.startNode();\n\n      if (this.eat(types.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens() {\n      const param = this.flowParsePrefixType();\n\n      if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n\n      return param;\n    }\n\n    flowParseIntersectionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation() {\n      if (this.state.type === types.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation() {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n      if (this.match(types.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n\n      return ident;\n    }\n\n    typeCastToParameter(node) {\n      node.expression.typeAnnotation = node.typeAnnotation;\n      this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n      return node.expression;\n    }\n\n    flowParseVariance() {\n      let variance = null;\n\n      if (this.match(types.plusMin)) {\n        variance = this.startNode();\n\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n\n      return variance;\n    }\n\n    parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(node, type, isMethod = false) {\n      if (this.match(types.colon)) {\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    parseStatement(context, topLevel) {\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n\n        return stmt;\n      }\n    }\n\n    parseExpressionStatement(node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    shouldParseExportDeclaration() {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier() {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n      if (!this.match(types.question)) return expr;\n\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(types.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let {\n        consequent,\n        failed\n      } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(types.colon);\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent() {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(types.colon);\n      this.state.noArrowParamsConversionAt.pop();\n      return {\n        consequent,\n        failed\n      };\n    }\n\n    getArrowLikeExpressions(node, disallowInvalid) {\n      const stack = [node];\n      const arrows = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n    }\n\n    finishArrowValidation(node) {\n      var _node$extra;\n\n      this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt(node, parse) {\n      let result;\n\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(node, startPos, startLoc) {\n      node = super.parseParenItem(node, startPos, startLoc);\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(types.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node) {\n      if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node) {\n      const decl = super.parseExport(node);\n\n      if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n\n      return decl;\n    }\n\n    parseExportDeclaration(node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node) {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node) {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n\n      return hasNamespace;\n    }\n\n    parseClassId(node, isStatement, optionalId) {\n      super.parseClassId(node, isStatement, optionalId);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(classBody, member, state) {\n      const pos = this.state.start;\n\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n        }\n      }\n    }\n\n    getTokenFromCode(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 123 && next === 124) {\n        return this.finishOp(types.braceBarL, 2);\n      } else if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else if (this.state.inType && code === 63) {\n        return this.finishOp(types.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node, isBinding) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\":\n          {\n            const last = node.properties.length - 1;\n            return node.properties.every((prop, i) => {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n            });\n          }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node) {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    toAssignableList(exprList, trailingCommaPos) {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n\n        if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    toReferencedList(exprList, isParenthesizedExpr) {\n      for (let i = 0; i < exprList.length; i++) {\n        var _expr$extra;\n\n        const expr = exprList[i];\n\n        if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n      }\n    }\n\n    parseClassProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassPrivateProperty(node);\n    }\n\n    isClassMethod() {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty() {\n      return this.match(types.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method) {\n      return !this.match(types.colon) && super.isNonstaticConstructor(method);\n    }\n\n    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    }\n\n    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node) {\n      super.parseClassSuper(node);\n\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented = node.implements = [];\n\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(true);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    }\n\n    parsePropertyName(node, isPrivateNameAllowed) {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      node.variance = variance;\n      return key;\n    }\n\n    parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      if (prop.variance) {\n        this.unexpected(prop.variance.start);\n      }\n\n      delete prop.variance;\n      let typeParameters;\n\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param) {\n      if (this.eat(types.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        param.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(startPos, startLoc, left) {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node) {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n      this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    maybeParseDefaultImportSpecifier(node) {\n      node.importKind = \"value\";\n      let kind = null;\n\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n\n      if (kind) {\n        const lh = this.lookahead();\n\n        if (kind === \"type\" && lh.type === types.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    parseImportSpecifier(node) {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n      let specifierTypeKind = null;\n\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(specifier.local.name, specifier.local.start, true);\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n      }\n\n      this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseFunctionParams(node, allowModifiers) {\n      const kind = node.kind;\n\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    parseVarId(decl, kind) {\n      super.parseVarId(decl, kind);\n\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id);\n      }\n    }\n\n    parseAsyncArrowFromCallExpression(node, call) {\n      if (this.match(types.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    shouldParseAsyncArrow() {\n      return this.match(types.colon) || super.shouldParseAsyncArrow();\n    }\n\n    parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _jsx;\n\n      let state = null;\n      let jsx;\n\n      if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n        state = this.state.clone();\n        jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n        if (!jsx.error) return jsx.node;\n        const {\n          context\n        } = this.state;\n\n        if (context[context.length - 1] === types$1.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === types$1.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n        var _jsx2, _jsx3;\n\n        state = state || this.state.clone();\n        let typeParameters;\n        const arrow = this.tryParse(abort => {\n          var _arrowExpression$extr;\n\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n            this.resetStartLocationFromNode(result, typeParameters);\n            return result;\n          });\n\n          if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n            abort();\n          }\n\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n          return arrowExpression;\n        }, state);\n        let arrowExpression = null;\n\n        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n          if (!arrow.error && !arrow.aborted) {\n            if (arrow.node.async) {\n              this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n    }\n\n    parseArrow(node) {\n      if (this.match(types.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          const typeNode = this.startNode();\n          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          return typeNode;\n        });\n        if (result.thrown) return null;\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow() {\n      return this.match(types.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(node, params) {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(node, allowDuplicates, isArrowFunction) {\n      if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow) {\n      return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n    }\n\n    parseSubscripts(base, startPos, startLoc, noCalls) {\n      if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n        const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n      if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, true);\n      } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(node, subscriptState.optionalChainMember);\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n    }\n\n    parseNewArguments(node) {\n      let targs = null;\n\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n      }\n\n      node.typeArguments = targs;\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(node, undefined, true);\n    }\n\n    readToken_mult_modulo(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 47 && this.state.hasFlowComment) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 124 && next === 125) {\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file, program) {\n      const fileNode = super.parseTopLevel(file, program);\n\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n\n      return fileNode;\n    }\n\n    skipBlockComment() {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n        }\n\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment() {\n      const {\n        pos\n      } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n\n      while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === 58 && ch3 === 58) {\n        return shiftToFirstNonWhiteSpace + 2;\n      }\n\n      if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n        return shiftToFirstNonWhiteSpace + 12;\n      }\n\n      if (ch2 === 58 && ch3 !== 58) {\n        return shiftToFirstNonWhiteSpace;\n      }\n\n      return false;\n    }\n\n    hasFlowCommentCompletion() {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n      }\n    }\n\n    flowEnumErrorBooleanMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n    }\n\n    flowEnumErrorInvalidMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n    }\n\n    flowEnumErrorDuplicateMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(pos, {\n      enumName,\n      suppliedType\n    }) {\n      return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n    }\n\n    flowEnumErrorInvalidMemberInitializer(pos, {\n      enumName,\n      explicitType,\n      memberName\n    }) {\n      let message = null;\n\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n\n        default:\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n    }\n\n    flowEnumMemberInit() {\n      const startPos = this.state.start;\n\n      const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n      switch (this.state.type) {\n        case types.num:\n          {\n            const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"number\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types.string:\n          {\n            const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"string\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types._true:\n        case types._false:\n          {\n            const literal = this.parseBooleanLiteral();\n\n            if (endOfInit()) {\n              return {\n                type: \"boolean\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        default:\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n      }\n    }\n\n    flowEnumMemberRaw() {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n        type: \"none\",\n        pos\n      };\n      return {\n        id,\n        init\n      };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n      const {\n        explicitType\n      } = context;\n\n      if (explicitType === null) {\n        return;\n      }\n\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType\n    }) {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: []\n      };\n\n      while (!this.match(types.braceR)) {\n        const memberNode = this.startNode();\n        const {\n          id,\n          init\n        } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n\n        if (memberName === \"\") {\n          continue;\n        }\n\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        seenNames.add(memberName);\n        const context = {\n          enumName,\n          explicitType,\n          memberName\n        };\n        memberNode.id = id;\n\n        switch (init.type) {\n          case \"boolean\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n              memberNode.init = init.value;\n              members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n              break;\n            }\n\n          case \"number\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n              memberNode.init = init.value;\n              members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n              break;\n            }\n\n          case \"string\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n              memberNode.init = init.value;\n              members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n              break;\n            }\n\n          case \"invalid\":\n            {\n              throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n            }\n\n          case \"none\":\n            {\n              switch (explicitType) {\n                case \"boolean\":\n                  this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                  break;\n\n                case \"number\":\n                  this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                  break;\n\n                default:\n                  members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n              }\n            }\n        }\n\n        if (!this.match(types.braceR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      return members;\n    }\n\n    flowEnumStringMembers(initializedMembers, defaultedMembers, {\n      enumName\n    }) {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (let _i = 0; _i < initializedMembers.length; _i++) {\n          const member = initializedMembers[_i];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return defaultedMembers;\n      } else {\n        for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n          const member = defaultedMembers[_i2];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName\n    }) {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(types.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null\n          });\n        }\n\n        const {\n          value\n        } = this.state;\n        this.next();\n\n        if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value\n          });\n        }\n\n        return value;\n      }\n\n      return null;\n    }\n\n    flowEnumBody(node, {\n      enumName,\n      nameLoc\n    }) {\n      const explicitType = this.flowEnumParseExplicitType({\n        enumName\n      });\n      this.expect(types.braceL);\n      const members = this.flowEnumMembers({\n        enumName,\n        explicitType\n      });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n            enumName\n          });\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n\n        default:\n          {\n            const empty = () => {\n              node.members = [];\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            };\n\n            node.explicitType = false;\n            const boolsLen = members.booleanMembers.length;\n            const numsLen = members.numberMembers.length;\n            const strsLen = members.stringMembers.length;\n            const defaultedLen = members.defaultedMembers.length;\n\n            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n              return empty();\n            } else if (!boolsLen && !numsLen) {\n              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                enumName\n              });\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n              for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                const member = _members$defaultedMem[_i3];\n                this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.booleanMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumBooleanBody\");\n            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n              for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                const member = _members$defaultedMem2[_i4];\n                this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.numberMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumNumberBody\");\n            } else {\n              this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                enumName\n              });\n              return empty();\n            }\n          }\n      }\n    }\n\n    flowParseEnumDeclaration(node) {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType) {\n      if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    isLookaheadToken_lt() {\n      const next = this.nextTokenStart();\n\n      if (this.input.charCodeAt(next) === 60) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return afterNext !== 60 && afterNext !== 61;\n      }\n\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n\n  }, _temp;\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n};\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.raise = void 0;\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types.question);\n    const labeled = this.eat(types.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.bigint:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types.bigint:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    return this.tsInDeclareContext(() => {\n      switch (starttype) {\n        case types._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types._const:\n          if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n\n    const callParseClassMember = () => {\n      super.parseClassMember(classBody, member, state);\n    };\n\n    if (member.declare) {\n      this.tsInDeclareContext(callParseClassMember);\n    } else {\n      callParseClassMember();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isDeclareContext && this.match(types.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isDeclareContext) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node));\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression);\n        return node;\n\n      default:\n        return super.toAssignable(node);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInDeclareContext(cb) {\n    const oldIsDeclareContext = this.state.isDeclareContext;\n    this.state.isDeclareContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isDeclareContext = oldIsDeclareContext;\n    }\n  }\n\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers == null ? void 0 : specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n    }\n\n    const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.maybeInAsyncArrowHead = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.isDeclareContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = void 0;\n    this.value = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n\n      if (this.state.strict) {\n        this.raise(start, ErrorMessages.StrictOctalLiteral);\n      } else {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else if (this.state.strict) {\n          this.raise(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, ErrorMessages.StrictNumericEscape);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, ErrorMessages.YieldBindingIdentifier);\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, ErrorMessages.AwaitBindingIdentifier);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, expr.name);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, ErrorMessages.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.type === \"ObjectMethod\" || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if ((arg.type === \"MemberExpression\" || arg.type === \"OptionalMemberExpression\") && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (property.type === \"PrivateName\") {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(property.id.name, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n    } else {\n      this.toReferencedListDeep(node.arguments);\n      if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n      if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.maybeInAsyncArrowHead = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const params = [this.parseIdentifier()];\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.checkYieldAwaitInDefaultParams();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i2 = 0; _i2 < exprList.length; _i2++) {\n        const param = exprList[_i2];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && prop.type !== \"ObjectProperty\" && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, ErrorMessages.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield() {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, ErrorMessages.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, BIND_LEXICAL, null, \"catch clause\");\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, ErrorMessages.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n      hadStaticBlock: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types.braceL)) {\n        this.parseClassStaticBlock(classBody, member, state);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(classBody, member, state) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if (state.hadStaticBlock) {\n      this.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n    }\n\n    if ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n\n    state.hadStaticBlock = true;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssignAllowIn();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.extra.raw, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    this.expectPlugin(\"importAssertions\");\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      let assertionKeyNode;\n\n      if (this.match(types.string)) {\n        assertionKeyNode = this.parseLiteral(this.state.value, \"StringLiteral\");\n      } else {\n        assertionKeyNode = this.parseIdentifier(true);\n      }\n\n      this.next();\n      node.key = assertionKeyNode;\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attrNames.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attrNames.add(node.key.name);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.match(types.name) && this.state.value === \"assert\" && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.raise = void 0;\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;","map":{"version":3,"sources":["C:/Users/sp479/Desktop/react js/movie_suggetion/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","inModule","scope","classScope","prodParam","plugins","sawUnambiguousESM","ambiguousScriptDifferentAst","state","length","hasPlugin","has","getPluginOption","plugin","get","last","stack","CommentsParser","addComment","comment","loc","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorMessages","freeze","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","DuplicateStaticBlock","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","estree","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","bigInt","BigInt","String","estreeParseDecimalLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","getObjectOrClassMethodParams","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","forEach","prop","checkProto","isRecord","protoRef","refExpressionErrors","isValidDirective","_stmt$expression$extr","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","isAccessor","shorthand","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","isLast","key","finishCallExpression","optional","callee","toReferencedListDeep","exprList","isParenthesizedExpr","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","TokContext","isExpr","preserveSpace","override","types$1","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","hasYield","isIterator","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords$1","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","_temp","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","trailingCommaPos","toReferencedList","_expr$extra","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","_i","_i2","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","_i3","_members$defaultedMem","_i4","_members$defaultedMem2","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","args","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","IndexSignatureHasDeclare","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TypeAnnotationAfterAssign","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","typescript","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","tsInDeclareContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","maybeInArrowParameters","oldYieldPos","yieldPos","oldAwaitPos","awaitPos","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","isDeclareContext","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","parseStatementContent","callParseClassMember","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","parseBindingAtom","parseMaybeDecoratorArguments","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsDeclareContext","placeholder","placeholders","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","mixinPlugins","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","_Object$keys","State","potentialArrowAt","inParameters","maybeInAsyncArrowHead","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","octalPositions","exportedIdentifiers","tokensLength","curPosition","skipArrays","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","readWord1","escStart","identifierCheck","esc","parent","update","UtilParser","addExtra","op","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","checkYieldAwaitInDefaultParams","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","isLiteralPropertyName","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","_node$extra2","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","parseSpread","parseRestBinding","parseObjectLike","close","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","_startLoc","_startPos","_left","strictModeChanged","_expr$properties","_expr$elements","elem","ExpressionParser","computed","used","shouldExitDescending","getExpression","paramFlags","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","isDelete","parseUpdate","parseExprSubscripts","maybeAsyncArrow","oldMaybeInAsyncArrowHead","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseMaybePrivateName","usePrivateName","parseNoCallExpr","tag","quasi","_node$arguments","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseArrayLike","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","oldLabels","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","checkGetterSetterParams","_params","oldInPropertyName","generator","canBePattern","isTuple","isExpression","oldInParameters","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","nameHash","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","StatementParser","interpreter","parseInterpreterDirective","_Array$from","from","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","_this$state$labels","statementStart","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","constructorAllowsSuper","hadConstructor","hadStaticBlock","parseClassStaticBlock","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","declarePrivateName","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","parseModuleExportName","l","hasFrom","nextAfterFrom","checkNames","isDefault","isFrom","_declaration$extra","_node$specifiers","exportedName","_i5","_node$declaration$dec","_i6","_node$properties","_i7","_node$elements","nodes","surrogate","toString","parseNext","assertions","maybeParseImportAssertions","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","assertionKeyNode","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","_this$stack","Parser","pluginsMap","pluginMap","_options","getParser","ast","_unused","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.options = void 0;\n    this.inModule = void 0;\n    this.scope = void 0;\n    this.classScope = void 0;\n    this.prodParam = void 0;\n    this.plugins = void 0;\n    this.filename = void 0;\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n    this.state = void 0;\n    this.input = void 0;\n    this.length = void 0;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction: \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { %0 as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.method) {\n      return;\n    }\n\n    super.checkProto(prop, isRecord, protoRef, refExpressionErrors);\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value);\n      return node;\n    }\n\n    return super.toAssignable(node);\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    if (!exprList) {\n      return;\n    }\n\n    super.toReferencedListDeep(exprList, isParenthesizedExpr);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n});\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.override = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class || this.state.value === \"yield\" && this.prodParam.hasYield) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => {\n  var _temp;\n\n  return _temp = class extends superClass {\n    constructor(options, input) {\n      super(options, input);\n      this.flowPragma = void 0;\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes() {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums() {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type, val) {\n      if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment) {\n      if (this.flowPragma === undefined) {\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n        if (!matches) ; else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || types.colon);\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate() {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(types.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n\n      if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n\n      if (this.eat(types.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(types.colon);\n      let type = null;\n      let predicate = null;\n\n      if (this.match(types.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n\n        if (this.match(types.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node) {\n      this.next();\n      this.flowParseInterfaceish(node, true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(node) {\n      this.next();\n      const id = node.id = this.parseIdentifier();\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(types.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(types.parenR);\n      [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n      this.resetEndLocation(id);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(node, insideModule) {\n      if (this.match(types._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(types._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(types._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(types.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(types._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(node) {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(true);\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node) {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(types.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = node.body = this.startNode();\n      const body = bodyNode.body = [];\n      this.expect(types.braceL);\n\n      while (!this.match(types.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(types._import)) {\n          this.next();\n\n          if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n            this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n          }\n\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n      this.expect(types.braceR);\n      this.finishNode(bodyNode, \"BlockStatement\");\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n          }\n\n          if (kind === \"ES\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(node, insideModule) {\n      this.expect(types._export);\n\n      if (this.eat(types._default)) {\n        if (this.match(types._function) || this.match(types._class)) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n\n        node.default = true;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n        }\n\n        if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(node) {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(node) {\n      this.next();\n      this.flowParseTypeAlias(node);\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(node) {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(node) {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    flowParseInterfaceish(node, isClass = false) {\n      node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n      this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false\n      });\n    }\n\n    flowParseInterfaceExtends() {\n      const node = this.startNode();\n      node.id = this.flowParseQualifiedTypeIdentifier();\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node) {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word, startLoc, declaration) {\n      if (!reservedTypes.has(word)) return;\n      this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n    }\n\n    flowParseRestrictedIdentifier(liberal, declaration) {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    flowParseTypeAlias(node) {\n      node.id = this.flowParseRestrictedIdentifier(false, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(types.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(node, declare) {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(true, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.supertype = null;\n\n      if (this.match(types.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(types.colon);\n      }\n\n      node.impltype = null;\n\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(types.eq);\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    flowParseTypeParameter(requireDefault = false) {\n      const nodeStart = this.state.start;\n      const node = this.startNode();\n      const variance = this.flowParseVariance();\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(types.eq)) {\n        this.eat(types.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration() {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n      this.state.inType = true;\n\n      if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      } while (!this.isRelational(\">\"));\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType() {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n      node.extends = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false\n      });\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey() {\n      return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(node, isStatic, variance) {\n      node.static = isStatic;\n\n      if (this.lookahead().type === types.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n\n      this.expect(types.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(node, isStatic) {\n      node.static = isStatic;\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(types.bracketR);\n      this.expect(types.bracketR);\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n      } else {\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n      }\n\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(node) {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(types.parenL);\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n\n      this.expect(types.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(node, isStatic) {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    }) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const nodeStart = this.startNode();\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n      let endDelim;\n      let exact;\n      let inexact = false;\n\n      if (allowExact && this.match(types.braceBarL)) {\n        this.expect(types.braceBarL);\n        endDelim = types.braceBarR;\n        exact = true;\n      } else {\n        this.expect(types.braceL);\n        endDelim = types.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart = null;\n        let inexactStart = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(types.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (this.eat(types.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n          } else {\n            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n          }\n        } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n\n            if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n        }\n      }\n\n      this.expect(endDelim);\n\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n      this.state.inType = oldInType;\n      return out;\n    }\n\n    flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n      if (this.eat(types.ellipsis)) {\n        const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n        let optional = false;\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    flowCheckGetterSetterParams(property) {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon() {\n      if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(types.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(startPos, startLoc, id) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType() {\n      const node = this.startNode();\n      this.expect(types._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType() {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(types.bracketL);\n\n      while (this.state.pos < this.length && !this.match(types.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(types.bracketR)) break;\n        this.expect(types.comma);\n      }\n\n      this.expect(types.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam() {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n\n      if (lh.type === types.colon || lh.type === types.question) {\n        name = this.parseIdentifier();\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(type) {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params = []) {\n      let rest = null;\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n\n      return {\n        params,\n        rest\n      };\n    }\n\n    flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    flowParsePrimaryType() {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case types.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n        case types.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true\n          });\n\n        case types.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false\n          });\n\n        case types.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case types.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(types.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n\n          break;\n\n        case types.parenL:\n          this.next();\n\n          if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            if (this.match(types.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== types.question && token !== types.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n              this.expect(types.parenR);\n              return type;\n            } else {\n              this.eat(types.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n        case types._true:\n        case types._false:\n          node.value = this.match(types._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case types.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n\n            if (this.match(types.num)) {\n              return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            if (this.match(types.bigint)) {\n              return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n          }\n\n          throw this.unexpected();\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n        case types._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case types._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case types._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case types.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType() {\n      const startPos = this.state.start,\n            startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n\n      while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(types.bracketL);\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n\n      return type;\n    }\n\n    flowParsePrefixType() {\n      const node = this.startNode();\n\n      if (this.eat(types.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens() {\n      const param = this.flowParsePrefixType();\n\n      if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n\n      return param;\n    }\n\n    flowParseIntersectionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation() {\n      if (this.state.type === types.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation() {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n      if (this.match(types.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n\n      return ident;\n    }\n\n    typeCastToParameter(node) {\n      node.expression.typeAnnotation = node.typeAnnotation;\n      this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n      return node.expression;\n    }\n\n    flowParseVariance() {\n      let variance = null;\n\n      if (this.match(types.plusMin)) {\n        variance = this.startNode();\n\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n\n      return variance;\n    }\n\n    parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(node, type, isMethod = false) {\n      if (this.match(types.colon)) {\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    parseStatement(context, topLevel) {\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n\n        return stmt;\n      }\n    }\n\n    parseExpressionStatement(node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    shouldParseExportDeclaration() {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier() {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n      if (!this.match(types.question)) return expr;\n\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(types.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let {\n        consequent,\n        failed\n      } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(types.colon);\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent() {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(types.colon);\n      this.state.noArrowParamsConversionAt.pop();\n      return {\n        consequent,\n        failed\n      };\n    }\n\n    getArrowLikeExpressions(node, disallowInvalid) {\n      const stack = [node];\n      const arrows = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n    }\n\n    finishArrowValidation(node) {\n      var _node$extra;\n\n      this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt(node, parse) {\n      let result;\n\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(node, startPos, startLoc) {\n      node = super.parseParenItem(node, startPos, startLoc);\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(types.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node) {\n      if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node) {\n      const decl = super.parseExport(node);\n\n      if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n\n      return decl;\n    }\n\n    parseExportDeclaration(node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node) {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node) {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n\n      return hasNamespace;\n    }\n\n    parseClassId(node, isStatement, optionalId) {\n      super.parseClassId(node, isStatement, optionalId);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(classBody, member, state) {\n      const pos = this.state.start;\n\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n        }\n      }\n    }\n\n    getTokenFromCode(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 123 && next === 124) {\n        return this.finishOp(types.braceBarL, 2);\n      } else if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else if (this.state.inType && code === 63) {\n        return this.finishOp(types.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node, isBinding) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\":\n          {\n            const last = node.properties.length - 1;\n            return node.properties.every((prop, i) => {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n            });\n          }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node) {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    toAssignableList(exprList, trailingCommaPos) {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n\n        if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    toReferencedList(exprList, isParenthesizedExpr) {\n      for (let i = 0; i < exprList.length; i++) {\n        var _expr$extra;\n\n        const expr = exprList[i];\n\n        if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n      }\n    }\n\n    parseClassProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassPrivateProperty(node);\n    }\n\n    isClassMethod() {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty() {\n      return this.match(types.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method) {\n      return !this.match(types.colon) && super.isNonstaticConstructor(method);\n    }\n\n    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    }\n\n    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node) {\n      super.parseClassSuper(node);\n\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented = node.implements = [];\n\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(true);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    }\n\n    parsePropertyName(node, isPrivateNameAllowed) {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      node.variance = variance;\n      return key;\n    }\n\n    parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      if (prop.variance) {\n        this.unexpected(prop.variance.start);\n      }\n\n      delete prop.variance;\n      let typeParameters;\n\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param) {\n      if (this.eat(types.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        param.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(startPos, startLoc, left) {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node) {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n      this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    maybeParseDefaultImportSpecifier(node) {\n      node.importKind = \"value\";\n      let kind = null;\n\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n\n      if (kind) {\n        const lh = this.lookahead();\n\n        if (kind === \"type\" && lh.type === types.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    parseImportSpecifier(node) {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n      let specifierTypeKind = null;\n\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(specifier.local.name, specifier.local.start, true);\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n      }\n\n      this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseFunctionParams(node, allowModifiers) {\n      const kind = node.kind;\n\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    parseVarId(decl, kind) {\n      super.parseVarId(decl, kind);\n\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id);\n      }\n    }\n\n    parseAsyncArrowFromCallExpression(node, call) {\n      if (this.match(types.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    shouldParseAsyncArrow() {\n      return this.match(types.colon) || super.shouldParseAsyncArrow();\n    }\n\n    parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _jsx;\n\n      let state = null;\n      let jsx;\n\n      if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n        state = this.state.clone();\n        jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n        if (!jsx.error) return jsx.node;\n        const {\n          context\n        } = this.state;\n\n        if (context[context.length - 1] === types$1.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === types$1.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n        var _jsx2, _jsx3;\n\n        state = state || this.state.clone();\n        let typeParameters;\n        const arrow = this.tryParse(abort => {\n          var _arrowExpression$extr;\n\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n            this.resetStartLocationFromNode(result, typeParameters);\n            return result;\n          });\n\n          if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n            abort();\n          }\n\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n          return arrowExpression;\n        }, state);\n        let arrowExpression = null;\n\n        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n          if (!arrow.error && !arrow.aborted) {\n            if (arrow.node.async) {\n              this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n    }\n\n    parseArrow(node) {\n      if (this.match(types.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          const typeNode = this.startNode();\n          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          return typeNode;\n        });\n        if (result.thrown) return null;\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow() {\n      return this.match(types.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(node, params) {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(node, allowDuplicates, isArrowFunction) {\n      if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow) {\n      return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n    }\n\n    parseSubscripts(base, startPos, startLoc, noCalls) {\n      if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n        const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n      if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, true);\n      } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(node, subscriptState.optionalChainMember);\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n    }\n\n    parseNewArguments(node) {\n      let targs = null;\n\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n      }\n\n      node.typeArguments = targs;\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(node, undefined, true);\n    }\n\n    readToken_mult_modulo(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 47 && this.state.hasFlowComment) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 124 && next === 125) {\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file, program) {\n      const fileNode = super.parseTopLevel(file, program);\n\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n\n      return fileNode;\n    }\n\n    skipBlockComment() {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n        }\n\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment() {\n      const {\n        pos\n      } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n\n      while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === 58 && ch3 === 58) {\n        return shiftToFirstNonWhiteSpace + 2;\n      }\n\n      if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n        return shiftToFirstNonWhiteSpace + 12;\n      }\n\n      if (ch2 === 58 && ch3 !== 58) {\n        return shiftToFirstNonWhiteSpace;\n      }\n\n      return false;\n    }\n\n    hasFlowCommentCompletion() {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n      }\n    }\n\n    flowEnumErrorBooleanMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n    }\n\n    flowEnumErrorInvalidMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n    }\n\n    flowEnumErrorDuplicateMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(pos, {\n      enumName,\n      suppliedType\n    }) {\n      return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n    }\n\n    flowEnumErrorInvalidMemberInitializer(pos, {\n      enumName,\n      explicitType,\n      memberName\n    }) {\n      let message = null;\n\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n\n        default:\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n    }\n\n    flowEnumMemberInit() {\n      const startPos = this.state.start;\n\n      const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n      switch (this.state.type) {\n        case types.num:\n          {\n            const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"number\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types.string:\n          {\n            const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"string\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types._true:\n        case types._false:\n          {\n            const literal = this.parseBooleanLiteral();\n\n            if (endOfInit()) {\n              return {\n                type: \"boolean\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        default:\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n      }\n    }\n\n    flowEnumMemberRaw() {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n        type: \"none\",\n        pos\n      };\n      return {\n        id,\n        init\n      };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n      const {\n        explicitType\n      } = context;\n\n      if (explicitType === null) {\n        return;\n      }\n\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType\n    }) {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: []\n      };\n\n      while (!this.match(types.braceR)) {\n        const memberNode = this.startNode();\n        const {\n          id,\n          init\n        } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n\n        if (memberName === \"\") {\n          continue;\n        }\n\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        seenNames.add(memberName);\n        const context = {\n          enumName,\n          explicitType,\n          memberName\n        };\n        memberNode.id = id;\n\n        switch (init.type) {\n          case \"boolean\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n              memberNode.init = init.value;\n              members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n              break;\n            }\n\n          case \"number\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n              memberNode.init = init.value;\n              members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n              break;\n            }\n\n          case \"string\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n              memberNode.init = init.value;\n              members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n              break;\n            }\n\n          case \"invalid\":\n            {\n              throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n            }\n\n          case \"none\":\n            {\n              switch (explicitType) {\n                case \"boolean\":\n                  this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                  break;\n\n                case \"number\":\n                  this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                  break;\n\n                default:\n                  members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n              }\n            }\n        }\n\n        if (!this.match(types.braceR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      return members;\n    }\n\n    flowEnumStringMembers(initializedMembers, defaultedMembers, {\n      enumName\n    }) {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (let _i = 0; _i < initializedMembers.length; _i++) {\n          const member = initializedMembers[_i];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return defaultedMembers;\n      } else {\n        for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n          const member = defaultedMembers[_i2];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName\n    }) {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(types.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null\n          });\n        }\n\n        const {\n          value\n        } = this.state;\n        this.next();\n\n        if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value\n          });\n        }\n\n        return value;\n      }\n\n      return null;\n    }\n\n    flowEnumBody(node, {\n      enumName,\n      nameLoc\n    }) {\n      const explicitType = this.flowEnumParseExplicitType({\n        enumName\n      });\n      this.expect(types.braceL);\n      const members = this.flowEnumMembers({\n        enumName,\n        explicitType\n      });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n            enumName\n          });\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n\n        default:\n          {\n            const empty = () => {\n              node.members = [];\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            };\n\n            node.explicitType = false;\n            const boolsLen = members.booleanMembers.length;\n            const numsLen = members.numberMembers.length;\n            const strsLen = members.stringMembers.length;\n            const defaultedLen = members.defaultedMembers.length;\n\n            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n              return empty();\n            } else if (!boolsLen && !numsLen) {\n              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                enumName\n              });\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n              for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                const member = _members$defaultedMem[_i3];\n                this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.booleanMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumBooleanBody\");\n            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n              for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                const member = _members$defaultedMem2[_i4];\n                this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.numberMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumNumberBody\");\n            } else {\n              this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                enumName\n              });\n              return empty();\n            }\n          }\n      }\n    }\n\n    flowParseEnumDeclaration(node) {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType) {\n      if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    isLookaheadToken_lt() {\n      const next = this.nextTokenStart();\n\n      if (this.input.charCodeAt(next) === 60) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return afterNext !== 60 && afterNext !== 61;\n      }\n\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n\n  }, _temp;\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.raise = void 0;\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types.question);\n    const labeled = this.eat(types.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.bigint:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types.bigint:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    return this.tsInDeclareContext(() => {\n      switch (starttype) {\n        case types._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types._const:\n          if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n\n    const callParseClassMember = () => {\n      super.parseClassMember(classBody, member, state);\n    };\n\n    if (member.declare) {\n      this.tsInDeclareContext(callParseClassMember);\n    } else {\n      callParseClassMember();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isDeclareContext && this.match(types.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isDeclareContext) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node));\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression);\n        return node;\n\n      default:\n        return super.toAssignable(node);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInDeclareContext(cb) {\n    const oldIsDeclareContext = this.state.isDeclareContext;\n    this.state.isDeclareContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isDeclareContext = oldIsDeclareContext;\n    }\n  }\n\n});\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers == null ? void 0 : specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n    }\n\n    const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.maybeInAsyncArrowHead = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.isDeclareContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.octalPositions = [];\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = void 0;\n    this.value = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n\n      if (this.state.strict) {\n        this.raise(start, ErrorMessages.StrictOctalLiteral);\n      } else {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else if (this.state.strict) {\n          this.raise(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, ErrorMessages.StrictNumericEscape);\n            } else {\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, ErrorMessages.YieldBindingIdentifier);\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, ErrorMessages.AwaitBindingIdentifier);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, expr.name);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, ErrorMessages.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || prop.type === \"ObjectMethod\" || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if ((arg.type === \"MemberExpression\" || arg.type === \"OptionalMemberExpression\") && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n\n      if (state.maybeAsyncArrow) {\n        this.state.maybeInAsyncArrowHead = true;\n      }\n\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n      this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      state.optionalChainMember = optional = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (property.type === \"PrivateName\") {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(property.id.name, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n    } else {\n      this.toReferencedListDeep(node.arguments);\n      if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n      if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldMaybeInAsyncArrowHead = this.state.maybeInAsyncArrowHead;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.maybeInAsyncArrowHead = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    const params = [this.parseIdentifier()];\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.checkYieldAwaitInDefaultParams();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.maybeInAsyncArrowHead = oldMaybeInAsyncArrowHead;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      if (!this.isAwaitAllowed() && !this.state.maybeInAsyncArrowHead) {\n        this.state.awaitPos = oldAwaitPos;\n      }\n\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i2 = 0; _i2 < exprList.length; _i2++) {\n        const param = exprList[_i2];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && prop.type !== \"ObjectProperty\" && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInAsyncArrowHead || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, ErrorMessages.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield() {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, ErrorMessages.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, BIND_LEXICAL, null, \"catch clause\");\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const octalPositions = [];\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n          hasStrictModeDirective = true;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (this.state.strict && octalPositions.length) {\n      for (let _i3 = 0; _i3 < octalPositions.length; _i3++) {\n        const pos = octalPositions[_i3];\n        this.raise(pos, ErrorMessages.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n      hadStaticBlock: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types.braceL)) {\n        this.parseClassStaticBlock(classBody, member, state);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(classBody, member, state) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if (state.hadStaticBlock) {\n      this.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n    }\n\n    if ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n\n    state.hadStaticBlock = true;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(node.key.id.name, CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.prodParam.enter(PARAM);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssignAllowIn();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.prodParam.exit();\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i4 = 0, _node$specifiers = node.specifiers; _i4 < _node$specifiers.length; _i4++) {\n          const specifier = _node$specifiers[_i4];\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.extra.raw, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i5 = 0, _node$declaration$dec = node.declaration.declarations; _i5 < _node$declaration$dec.length; _i5++) {\n            const declaration = _node$declaration$dec[_i5];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i6 = 0, _node$properties = node.properties; _i6 < _node$properties.length; _i6++) {\n        const prop = _node$properties[_i6];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i7 = 0, _node$elements = node.elements; _i7 < _node$elements.length; _i7++) {\n        const elem = _node$elements[_i7];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n        const attributes = this.maybeParseModuleAttributes();\n\n        if (attributes) {\n          node.attributes = attributes;\n        }\n      }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    this.expectPlugin(\"importAssertions\");\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      let assertionKeyNode;\n\n      if (this.match(types.string)) {\n        assertionKeyNode = this.parseLiteral(this.state.value, \"StringLiteral\");\n      } else {\n        assertionKeyNode = this.parseIdentifier(true);\n      }\n\n      this.next();\n      node.key = assertionKeyNode;\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attrNames.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attrNames.add(node.key.name);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.match(types.name) && this.state.value === \"assert\" && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.raise = void 0;\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}